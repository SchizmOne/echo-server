# This Ansible playbook serves as a quick way to deploy echo-server project to the remote machine.
# It should work with machines that are using Debian-like OS (e.g. Ubuntu).
# 
# This is a very simplistic approach where the playbook will clone Git Repository locally on the machine.
# Then it will create the virtual environment in which should be able to run client or simply
# launch the echo-server.
#
# Notice that this playbook requires the privilege escalation. This is because we want to make sure
# that the latest version of Python3 is installed on the remore machine, before attempting to create
# virtual environment.
#
# So the playbook should be run like this:
# ```
# ansible-playbook -v -K deploy-server-to-remote-machine.yml
# ```
#
# Enter the user password when being asked and that's it.
---

- name: deploy-echoserver
  hosts: linux

  tasks:

  - name: Download echo-server repository from GitHub to the local directory
    ansible.builtin.git:
      repo: 'https://github.com/SchizmOne/echo-server.git'
      dest: echo-server

  - name: Install latest version of Python and Docker
    become: true
    ansible.builtin.package:
      name: 
      - python3
      - python3-venv
      - python3-pip
      state: latest

  - name: Check installed version of Python
    ansible.builtin.command:
      cmd: python3 --version
    register: python3_version

  - name: Display the version of Python 3
    ansible.builtin.debug:
      msg: "Installed: {{ python3_version.stdout }}"

  - name: Prepare Virtual Environment on the remote machine
    ansible.builtin.command:
      cmd: make prepare_venv
      chdir: echo-server/
      creates: echo-server/venv/bin/activate

  - name: Notify about the successful deploy
    ansible.builtin.debug:
      msg: "echo-server project ready for work inside the virtual environment"
