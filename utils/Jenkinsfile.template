pipeline {

    agent any

    parameters {
        choice(
            name: 'MODE',
            choices: ['local', 'remote'],
            description: 'Modes of the echo-server client'
        )
        string(
            name: 'SERVER_ADDRESS',
            defaultValue: 'http://localhost:8080/',
            description: 'Address of the running instance of EchoServer to which client will send requests'
        )
        string(
            name: 'FILENAME',
            defaultValue: 'filename.txt',
            description: 'Name of the file to which the text from server response will be saved (default: "filename.txt")'
        )
        string(
            name: 'REMOTE_HOST',
            description: 'Host address of the remote machine where the file will be saved via SSH (required for remote mode)'
        )
    }

    environment {
        IMAGE_NAME = 'echoserver'
        IMAGE_TAG  = 'latest'
        HELLO_STRING = 'hello'
        REMOTE_CREDS = credentials('YOUR_CREDENTIALS_ID')
    }

    stages {

        stage('Check Parameters') {
            steps {
                script {
                    if (params.MODE == 'remote' && params.REMOTE_HOST.isEmpty()) {
                        throw new Exception("For remote mode you have to provide REMOTE_HOST parameter")
                    } 
                }
            }
        }

        stage('Build EchoServer client image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}")
                }
            }
        }

        stage('Run EchoServer client') {
            steps {
                script {
                    if (params.MODE == 'local') {
                        sh """
                        docker run --rm -v ./output/:/app/output ${IMAGE_NAME}:${IMAGE_TAG} \
                          echoserver_client.py --server_address=${params.SERVER_ADDRESS} \
                          -m=${params.MODE} -f=${params.FILENAME}
                        """
                    }
                    if (params.MODE == 'remote') {
                        sh """
                        docker run --rm -e REMOTE_CREDS=$REMOTE_CREDS ${IMAGE_NAME}:${IMAGE_TAG} \
                          echoserver_client.py --server_address=${params.SERVER_ADDRESS} \
                          -m=${params.MODE} -f=${params.FILENAME} \
                          --remote_host=${params.REMOTE_HOST}
                        """
                    }
                }
            }
        }

        stage('Verify EchoServer client run results') {
            steps {
                script {
                    if (params.MODE == 'local') {
                        def fileContent = readFile("output/${params.FILENAME}")
                        if (fileContent.trim() != HELLO_STRING) {
                            error "File '${params.FILENAME}' content does not match '${HELLO_STRING}'."
                        }
                    }
                    if (params.MODE == 'remote') {
                        def remote = [:]
                        remote.name = 'REMOTE_HOST'
                        remote.host = REMOTE_HOST
                        remote.user = REMOTE_CREDS_USR
                        remote.password = REMOTE_CREDS_PSW
                        remote.allowAnyHosts = true
                        sshGet remote: remote, from: params.FILENAME, into: params.FILENAME, override: true, failOnError: true
                    }
                }
            }
        }

    }

    post {
        success {
            script {
                if (params.MODE == 'local') {
                    archiveArtifacts artifacts: "output/${params.FILENAME}"
                    echo "Saved the file after the executed container with ${params.MODE} mode"
                }
            }
        }
    }
}